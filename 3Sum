#include <iostream>
#include <vector>

using namespace std;

void quickSort(vector<int>& a, int left, int right) {
    if (left >= right) return;

    int i = left, j = right;
    int pivot = a[(left + right) / 2];

    while (i <= j) {
        while (a[i] < pivot) ++i;
        while (a[j] > pivot) --j;
        if (i <= j) {
            int tmp = a[i];
            a[i] = a[j];
            a[j] = tmp;
            ++i; --j;
        }
    }
    if (left < j)  quickSort(a, left, j);
    if (i < right) quickSort(a, i, right);
}


vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> res;
    const int n = static_cast<int>(nums.size());
    if (n < 3) return res;

    quickSort(nums, 0, n - 1);                     

    for (int i = 0; i < n - 2; ++i) {
        if (i > 0 && nums[i] == nums[i - 1])       
            continue;

        int l = i + 1;
        int r = n - 1;

        while (l < r) {
            long long sum = 1LL * nums[i] + nums[l] + nums[r]; // avoid overflow

            if (sum == 0) {
                res.push_back({nums[i], nums[l], nums[r]});

                
                while (l < r && nums[l] == nums[l + 1]) ++l;
                while (l < r && nums[r] == nums[r - 1]) --r;
                ++l; --r;
            }
            else if (sum < 0) {
                ++l;                                
            }
            else {
                --r;                                
            }
        }
    }
    return res;
}

int main() {
    cout << "Enter integers (Ctrl-D / Ctrl-Z to finish): ";
    vector<int> nums;
    int x;
    while (cin >> x) nums.push_back(x);

    auto triplets = threeSum(nums);

    cout << "\nTriplets that sum to zero (" << triplets.size() << "):\n";
    for (const auto& t : triplets)
        cout << '[' << t[0] << ", " << t[1] << ", " << t[2] << "]\n";
    return 0;
}


